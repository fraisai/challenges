/*
Write a function findInOrderedSet that determines if a target value exists within an array of numbers.

Assuming that the array is sorted in ascending order, can you accomplish this with time complexity better than O(n)?

ex:
const nums = [-3, 0, 8, 13, 37]
findInOrderedSet(nums, 0);  -> true
findInOrderedSet(nums, 2);  -> false
*/

const findInOrderedSet = (array, target, i = 0) => {
  // A good example of O(1) time is accessing a value with an array index. 
  // Other examples of O(1) time include: push() and pop() operations on an array

  // Method 3: O(1) time complexity
  if (array[i] === target) return true;
  if (array[i] === undefined) return false;
  return findInOrderedSet(array, target, i += 1);

  // Method 2: O(n) time complexity
  // if (array[0] === target) return true;
  // if (array.length === 0) return false;
  // let newArr = array.slice(1) // slice has O(n) time complexity
  // return findInOrderedSet(newArr, target);

  // Method 1: O(n) time
  // let answer;
  // (array.includes(target)) ? answer = true : answer = false;
  // return answer;
};
const arr = [-41, -2, 0, 1, 3, 13, 72];

console.log(findInOrderedSet(arr, 1)) //.toBe(true))

console.log(findInOrderedSet(arr, -2)) //.toBe(true));
console.log(findInOrderedSet(arr, 13)) //.toBe(true));
